<?php

include_once 'teaser.features.inc';

/**
 * Get a list of types declared as teasers, keyed by teaser content type name.
 *
 * @return array
 */
function teaser_get_types() {
  $teaser_types = &drupal_static(__FUNCTION__);
  if (empty($teaser_types)) {
    $teaser_types = module_invoke_all('teaser_types');
  }

  return $teaser_types;
}

/**
 * Get a list of types declared as teasers.
 *
 * @return array
 */
function teaser_get_types_list() {
  return array_keys(teaser_get_types());
}

/**
 * Determine if a bundle is a teaser type.
 *
 * @return boolean
 */
function teaser_is_teaser($bundle) {
  return in_array($bundle, teaser_get_types_list());
}

/**
 * Implements hook_node_view().
 *
 * Disable full page views for teaser nodes.
 */
function teaser_node_view($node, $view_mode, $langcode) {
  if (in_array($node->type, teaser_get_types_list())
    && $view_mode == 'full'
    && !user_access('create ' . $node->type . ' content')
  ) {
    drupal_not_found();
    exit();
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function teaser_form_node_form_alter(&$form, $form_state) {
  // Alter only edit forms of teaser type nodes
  if (isset($form['#node_edit_form'])
    && $form['#node_edit_form'] === TRUE
    && teaser_is_teaser($form['#bundle'])
  ) {
    // Add an after_build function, so that we can alter i18n settings (executed in an after build)
    $form['#after_build'][] = 'teaser_node_form_after_build';
  }
}

/**
 * Form after build function callback.
 *
 * @see teaser_form_node_form_alter().
 */
function teaser_node_form_after_build($form, $form_state) {
  // When adding new teaser nodes, set default language to the current language
  if ($form['#node_edit_form']
    && teaser_is_teaser($form['type']['#value'])
    && !isset($form['nid']['#value'])
  ) {
    if (!empty($GLOBALS['language_url'])) {
      $language_to_set = $GLOBALS['language_url']->language;
    }
    else {
      $language_to_set = $GLOBALS['language']->language;
    }
    $form['language']['#default_value'] = $language_to_set;
    $form['language']['#value'] = $language_to_set;

    // Remove LANGUAGE_NONE from available languages.
    unset($form['language']['#options'][LANGUAGE_NONE]);
  }

  return $form;
}

/**
 * Implements hook_node_view_alter().
 */
function teaser_node_view_alter(&$build) {
  // Create preview page, showing all active and rendered view modes of teaser content types.
  // Only apply on full view mode.
  if (isset($build['#bundle'])
    && teaser_is_teaser($build['#bundle'])
    && ($build['#view_mode'] == 'full')
  ) {
    // Save build in temp variable.
    $build_tmp = $build;
    // Clear build mode, so that we can rebuild it.
    $build = array();

    // Get available view modes for this entity type bundle.
    $entity_info = entity_get_info($build_tmp['#entity_type']);
    $view_modes = $entity_info['view modes'];
    $view_mode_settings = field_view_mode_settings($build_tmp['#entity_type'], $build_tmp['#bundle']);

    // Loop through the view modes
    foreach ($view_modes as $view_mode_name => $view_mode_info) {
      // teaser_basic is not a stand alone view mode, so skip.
      if (!empty($view_mode_settings[$view_mode_name]['custom_settings']) && $view_mode_name != 'teaser_basic') {
        $build_add = node_view($build_tmp['#node'], $view_mode_name);
        $build_add['#view_mode'] = $view_mode_name;
        $build_add['#prefix'] = '<div class="view-mode-list-item view-mode-list-item-' . $view_mode_name . '"><span class="title">' . $view_mode_info['label'] . '</span>';
        $build_add['#suffix'] = '</div>';
        // Add it to build mode array.
        $build[] = $build_add;
      }
    }
  }
}



